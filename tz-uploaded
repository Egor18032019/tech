1) Вам пришлют тз в нем будет название, packagename, ссылка на кейтаро и ссылка на дизайн в редакторе Figma.
2) Приложение можно разделить условно на три части:
-клоака(стартовый код приложения, который проходит во время загрузки)
-webview(основной код, который показывает сайт)
-заглушка(часть приложения, для которой тебе скинут дизайн)

3)Клоака: у тебя будет ссылка, при запуске приложения, ты делаешь запрос на нее, и в зависимости от ответа, определяешь, показать webview или заглушку.

Перед запросом можешь выполнить проверку на модель устройства и если эмулятор, то сразу в заглушку перейти, не делая запрос.
4)WebView: полученную ссылку с кейтаро, открываешь в webview. Webview должен уметь:
-загружать фото на сайт;
-хранить куки;
-обрабатывать ошибки;
-во время загрузки показывать на экране progressbar;
-при смене ориентации, не должно перезапускать страницу (В любой момент он должен смочь перевернуть экран и не потерять никакие данные);
-открывать всплывающие pop-up окна (То есть различные всплывающие окна должны корректно отображаться на web view пользователя, также он должен иметь возможность закрыть их.);
-поддержка java-script. WebView должно поддерживать js, чтобы была плавная анимация веб вью и в принципе все было интерактивно;
-поддержка масштаба содержимого. То есть пользователь должен иметь возможность отдалять, приближать WebView;
-при клике на кнопку назад, приложение не должно закрывать;
5)Заглушка: тут делается все по дизайну, с чистым кодом

6)Проверка уникализации приложения: после того как проект готов, загружаем на сайт https://cabinet.apprefactoring.com,
 там смотри в чем есть схожесть и все исправляем.
 Обращаю внимание, не надо делать ignore элементов, проект еще раз будет загружен нами на сайт.
 Общий процент схожести должен быть меньше 10, а в пунктах структура кода равен 0
Для уникализации кода, классы не должны быть пустыми, как минимум от 5 строчек кода, тоже самое с функциями. 
Переменные не называть классическими или стандартными именами, например: webview, url, response, imageView, context, view и тд.
7) Приложение необходимо обфусцировать. Что такое обфускация в простом виде - это запутывание кода , чтобы уникализировать байт код приложения. 
Приложения с хорошей обфускацией проходят чаще. 
Для обфускации можно использовать if else блоки,while и т.д. 
Или вовсе делать отдельные классы, запутывающие байт код. Стоит учесть, что пустые if else блоки не влияют на байт код.
8)Релиз приложения: вам предоставляют доступ к серверу, на нем вы собираете aab. 
Обязательно, записываем пароль от keystore. И нам вы сдаете исходный код, aab, keystore и данные к нему.
Примечание:
Если вы разрабатываете на Kotlin/Java. Стоит обратить внимание на типовые ошибки, которые возникают:
- не поддержка http протокола. Если ваше веб вью не поддерживает http протокол, а только https, то выведется ошибка. 
Поэтому в Manifects.xml необходимо указать android:usesCleartextTraffic="true"
- если вы используете Proguard для обфускации приложения,то не забудьте указать pro guard rules,чтобы исключить директории для обфускации.
 Это будет важно при работе с сервером, если вы не укажете директорию с дата файлами,которые не должны обфусцировать, 
то на сервер будут слаться json обфусцированные.


Технические требования и рекомендации по созданию Android приложения с использованием клоаки и WebView
Разработка приложения
1. От 5 экранов должно быть в приложение, не считая экрана с webview, можно добавить различные экраны, которые есть во всех играх. Они должны соответствовать предоставленному дизайну.
2. Использование музыки в приложение, но авторские права не нарушить
3. Использование от 3 сторонних библиотек, таких как glide и тд. Не просто добавить, но и задействовать их
4. Не оставлять логи, пустые классы/функции, неиспользуемый код
5. Использовать кастомные вьюшки, например progressbar кастомный и тд
7. Объем кода: классов должно быть от 50, в каждом классе от 10 строчек кода и тоже саое касается функций от 5 строчек. По необхожимости добавляйте «мусорный код», чтоб был объем
8. Все string хранить в файле strings.xml
9. Использовать анимацию внутри заглушки
10. Не оставлять в приложение упоминание о webview, все название переменных, классов, не должно содержать слов связанных с этим
11. Название переменных, нельзя использовать такие названия как view, item, parent, position, все должно быть уникально. 
Например можете к каждой переменной добавлять фрагмент пакета приложения
12. Должны быть кастомные цвета, например, черный цвет, немного изменить оттенок, и так со всеми цветами которые из палитры студии палитре
13. Все цвета заносить в файл color.xml
14. Все id вьюшек должны быть уникальными, не должно быть в приложение imageView1 и тд
15. Использование Clean Architecture, SOLID, Coroutines
16. Использовать кастомные шрифты
17. Названия картинок в папке drawable делать уникальными. Например добавлять часть из названия.
Клоака
⦁Необходимо выполнить проверки при запуске
Наличие sim
Авиарежим - если включен, открываем заглушку
Отладка по USB и режим разработчика - если включены, открываем заглушку
Подключение к интернету - если нет подключения, показываем сообщение "Connection error" с кнопкой "Retry" и не пропускаем дальше.
⦁После выполняется простой запрос на ссылку, если ответ 200, проверяем response.body, если там есть ссылка, то передаем ее в webview. Если пусто или код запроса не равен 200, переходим в заглушку.
⦁Во время проверки и запроса на экране должен быть loader, только после получения ссылки начинаем работать с webview. В приложении при загрузке не должно быть видно никаких сторонних активностей. Например открытие web view, а затем открытие заглушки и наоборот.
⦁Должны обрабатываться все возможные исходы. И направлять пользователя в заглушку
Работа webview
⦁Сохранение cookie из web view в приложении. Между сессиями в приложении пользователя не должно разлогинивать на сайте, открывающемся в web view.
⦁Экран приложения с web view должен иметь возможность смены ориентации (поворота экрана). Стариница никак не должна перезагружаться, для этого в манифест, для активити добавить это:
android:configChanges="smallestScreenSize|keyboardHidden|orientation|uiMode|screenLayout|screenSize|keyboard"
android:exported="true"
android:hardwareAccelerated="true"
android:screenOrientation="fullSensor"
android:windowSoftInputMode="adjustResize"
⦁Web view приложения должно иметь возможность загрузки файлов, из web view должна быть возможность сделать фото при необходимости, должна быть возможность залогиниться с помощью google.
⦁Открытие всплывающих окон (открывающихся по ссылке с атрибутом target="_blank") не должно быть ограничено (например, открытие преленда при первом запуске, при повторных оно не должно отображаться;открытие страницы оплаты). Открытие дочерних окон реализуется созданием еще одно webview
Уникализация кода
После того как проверили приложение, загружаете исходный код в формате зип, с очищенным кешом на сайт https://apprefactoring.com.
Собирать зип проекта из андроид студии, File->Export->Export to zip file
После загрузки проекта на сайт, проверяете эти параметры
У вас должно быть 0% в пуктах:
⦁Kotlin class structure
⦁Kotlin file structure
⦁Class name
⦁Method name
⦁View ID
⦁Color name
Возмножно проект будет загружен на наш аккаунт и там должно показать общий процент меньше 10
Если были соблюдены все пункты из первого раздела, здесь не должно возникнуть проблем.